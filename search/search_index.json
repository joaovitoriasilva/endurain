{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Endurain A self-hosted fitness tracking service - Mastodon profile - Discord server What is Endurain? Endurain is a self-hosted fitness tracking service designed to give users full control over their data and hosting environment. Built with: Frontend: Vue.js, Notivue and Bootstrap CSS Backend: Python FastAPI, Alembic, SQLAlchemy, stravalib and python-garminconnect for Strava and Garmin Connect integration, gpxpy and fitdecode for .gpx and .fit file import respectively Database: MariaDB or PostgreSQL for efficient data management Observability: Jaeger for basic tracing and monitoring To deploy Endurain, a Docker image is available, and a comprehensive example can be found in the \"docker-compose.yml.example\" file provided in the project repository. Configuration is facilitated through environment variables, ensuring flexibility and ease of customization. Developer's Note As a non-professional developer, my journey with Endurain involved learning and implementing new technologies and concepts, with invaluable assistance from ChatGPT. The primary motivation behind this project was to gain hands-on experience and expand my understanding of modern development practices. Second motivation is that I'm an amateur triathlete and I want to keep track of my gear and gear components usage. If you have any recommendations or insights on improving any aspect of Endurain, whether related to technology choices, user experience, or any other relevant area, I would greatly appreciate your input. The goal is to create a reliable and user-friendly fitness tracking solution that caters to the needs of individuals who prefer self-hosted applications. Your constructive feedback will undoubtedly contribute to the refinement of Endurain. Features Endurain currently supports: Multi-user functionality with admin and user profiles adaptable interfaces Activity import via manual or bulk upload (.gpx and .fit files. .fit files are preferred) Strava integration for syncing activities and gear Garmin Connect integration for syncing activities, gear and body composition Activity feeds and statistics (week/month) Basic activity privacy settings Gear tracking (wetsuits, bicycles, shoes, racquets) Default gear for activity types User pages with stats and activity histories Follower features (view activities) Multi-language support Imperial and metric units support Dark/light theme switcher Third-party app support Weight logging Planned Features Upcoming features (in no particular order): Live tracking Gear component tracking (e.g., track when components like bike chains need replacing) Activity comments and likes Notification system Potential ActivityPub integration Sponsors A huge thank you to the project sponsors! Your support helps keep this project going. Consider sponsoring Endurain on GitHub to ensure continuous development. Contributing Contributions are welcomed! Please open an issue to discuss any changes or improvements before submitting a PR. Check out the Contributing Guidelines for more details. License This project is licensed under the AGPL-3.0 or later License. Help Translate Endurain has multi-language support, and you can help translate it into more languages via Crowdin . Currently supported in: Catalan by @rubenixnagios German by @ThreeCO French (FR) @gwenvador Dutch (NL) @woutvanderaa Portuguese (PT) Spanish (ES) @rgmelkor English (US) Star History","title":"Home"},{"location":"#what-is-endurain","text":"Endurain is a self-hosted fitness tracking service designed to give users full control over their data and hosting environment. Built with: Frontend: Vue.js, Notivue and Bootstrap CSS Backend: Python FastAPI, Alembic, SQLAlchemy, stravalib and python-garminconnect for Strava and Garmin Connect integration, gpxpy and fitdecode for .gpx and .fit file import respectively Database: MariaDB or PostgreSQL for efficient data management Observability: Jaeger for basic tracing and monitoring To deploy Endurain, a Docker image is available, and a comprehensive example can be found in the \"docker-compose.yml.example\" file provided in the project repository. Configuration is facilitated through environment variables, ensuring flexibility and ease of customization.","title":"What is Endurain?"},{"location":"#developers-note","text":"As a non-professional developer, my journey with Endurain involved learning and implementing new technologies and concepts, with invaluable assistance from ChatGPT. The primary motivation behind this project was to gain hands-on experience and expand my understanding of modern development practices. Second motivation is that I'm an amateur triathlete and I want to keep track of my gear and gear components usage. If you have any recommendations or insights on improving any aspect of Endurain, whether related to technology choices, user experience, or any other relevant area, I would greatly appreciate your input. The goal is to create a reliable and user-friendly fitness tracking solution that caters to the needs of individuals who prefer self-hosted applications. Your constructive feedback will undoubtedly contribute to the refinement of Endurain.","title":"Developer's Note"},{"location":"#features","text":"Endurain currently supports: Multi-user functionality with admin and user profiles adaptable interfaces Activity import via manual or bulk upload (.gpx and .fit files. .fit files are preferred) Strava integration for syncing activities and gear Garmin Connect integration for syncing activities, gear and body composition Activity feeds and statistics (week/month) Basic activity privacy settings Gear tracking (wetsuits, bicycles, shoes, racquets) Default gear for activity types User pages with stats and activity histories Follower features (view activities) Multi-language support Imperial and metric units support Dark/light theme switcher Third-party app support Weight logging","title":"Features"},{"location":"#planned-features","text":"Upcoming features (in no particular order): Live tracking Gear component tracking (e.g., track when components like bike chains need replacing) Activity comments and likes Notification system Potential ActivityPub integration","title":"Planned Features"},{"location":"#sponsors","text":"A huge thank you to the project sponsors! Your support helps keep this project going. Consider sponsoring Endurain on GitHub to ensure continuous development.","title":"Sponsors"},{"location":"#contributing","text":"Contributions are welcomed! Please open an issue to discuss any changes or improvements before submitting a PR. Check out the Contributing Guidelines for more details.","title":"Contributing"},{"location":"#license","text":"This project is licensed under the AGPL-3.0 or later License.","title":"License"},{"location":"#help-translate","text":"Endurain has multi-language support, and you can help translate it into more languages via Crowdin . Currently supported in: Catalan by @rubenixnagios German by @ThreeCO French (FR) @gwenvador Dutch (NL) @woutvanderaa Portuguese (PT) Spanish (ES) @rgmelkor English (US)","title":"Help Translate"},{"location":"#star-history","text":"","title":"Star History"},{"location":"developer-guide/","text":"Developer guide Setup a dev environment Bellow are the steps to create a dev environment. Examples bellow will use Endurain repo, but you should adapt those for your scenario (forked repo, etc). Clone the repo to your dev machine: $ cd <folder_to_store_code> $ git clone https://github.com/joaovitoriasilva/endurain.git # this will clone the repo structure to the previous folder inside a folder called endurain Docker image and backend logic Make sure Docker is installed, more info here . On the project root folder, create a new Docker image, the example bellow uses unified-image as the image name: $ docker build -f docker/Dockerfile -t unified-image . Go to the project root folder and create a file called docker-compose.yml and adapt it to your needs. Example bellow: services: endurain: container_name: endurain image: unified-image # based on image that will be created above environment: - TZ=Europe/Lisbon # change if needed. Default is UTC - DB_TYPE=postgres - DB_HOST=postgres - DB_PORT=5432 - DB_PASSWORD=changeme - SECRET_KEY=changeme # openssl rand -hex 32 - FERNET_KEY=changeme # https://fernetkeygen.com or python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\" - GEOCODES_MAPS_API=changeme - ENDURAIN_HOST=http://localhost:8080 # change if needed - BEHIND_PROXY=false - ENVIRONMENT=development volumes: - <path_to_project_root_folder>/backend/app:/app/backend # this will replace the backend code logic with yours. Any changes in the code need a container reboot for them to apply ports: - \"8080:8080\" # change if needed depends_on: postgres: condition: service_healthy restart: unless-stopped postgres: image: postgres:latest container_name: postgres environment: - POSTGRES_PASSWORD=changeme - POSTGRES_DB=endurain - POSTGRES_USER=endurain - PGDATA=/var/lib/postgresql/data/pgdata ports: - \"5432:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U endurain\"] interval: 5s timeout: 5s retries: 5 volumes: - <path_to_container_folders>/postgres:/var/lib/postgresql/data restart: unless-stopped adminer: container_name: adminer image: adminer ports: - 8081:8080 restart: unless-stopped Start your project based on the docker compose file created before: $ docker compose up -d To stop the project: $ docker compose down To remove the create unified-image Docker image: $ docker image remove unified-image Backend uses Poetry for dependency management. You may need to install Python and Poetry if dependency management is necessary. Frontend Make sure you have an up-to-date version of Node.js installed. Go to the root of the project and move to frontend/app folder and install the dependencies: $ cd frontend/app $ npm install Create a file called .env.local inside frontend/app and add the following to it: VITE_ENDURAIN_HOST=http://localhost:8080 # Adapt this based on the docker compose of your dev environment After the dependencies are installed run the frontend: $ npm run dev After the frontend starts running, it should be available in the port 5173 . You should now be able to access the dev environment at http://localhost:5173 . Screenshot bellow shows the output from the npm run dev . Adapt the port based on the command output. Some processes, like token refresh may redirect your dev env from port 5173 to 8080 (or other, depending on your compose file). If this happens simply navigate again to 5173 . API Integration (v0.3.0+) Endurain supports integration with other apps: API Requirements Add a header: Every request must include an X-Client-Type header with either web or mobile as the value. Requests with other values will receive a 403 error. Authorization: Every request must include an Authorization Bearer: <access token> header with a valid (new or refreshed) access token. Token Handling The backend will generate an access_token valid for 15 minutes and an refresh_token valid for 7 days. This follow the logic of short and longed lived tokens for auth session. The access_token is used for authorization; The refresh_token is used to refresh the access_token . For web apps , the backend sends access/refresh tokens as HTTP-only cookies. For mobile apps , tokens are included in the response body. API Endpoints The API is reachable under /api/v1 . Below are some example endpoints. All endpoints information can be checked on the backend docs ( http://localhost:98/docs or http://ip_address:98/docs or https://domain/docs ): What Url Expected Information Authorize /token FORM with the fields username and password . This will be sent in clear text, use of HTTPS is highly recommended Refresh Token /refresh header Authorization Bearer: <Refresh Token> Activity Upload /activities/create/upload .gpx or .fit file Set Weight /health/weight JSON {'weight': , 'created_at': yyyy-MM-dd } Supported activity types The table bellow details the activity types supported by Endurain: Name Value Run 1 Trail run 2 Virtual run 3 Road cycling 4 Gravel cycling 5 MTB cycling 6 Commuting cycling 27 Virtual cycling 7 Indoor swimming 8 Open water swimming 9 General workout 10 Walk 11 Hike 12 Rowing 13 Yoga 14 Alpine ski 15 Nordic Ski 16 Snowboard 17 Transition 18 Strength Training 19 Crossfit 20 Tennis 21 Table Tennis 22 Badminton 23 Squash 24 Racquetball 25 Pickleball 26 Supported gear types The table bellow details the gear types supported by Endurain: Name Value Bike 1 Shoes 2 Wetsuit 3 Racquet 4","title":"Developer guide"},{"location":"developer-guide/#developer-guide","text":"","title":"Developer guide"},{"location":"developer-guide/#setup-a-dev-environment","text":"Bellow are the steps to create a dev environment. Examples bellow will use Endurain repo, but you should adapt those for your scenario (forked repo, etc). Clone the repo to your dev machine: $ cd <folder_to_store_code> $ git clone https://github.com/joaovitoriasilva/endurain.git # this will clone the repo structure to the previous folder inside a folder called endurain","title":"Setup a dev environment"},{"location":"developer-guide/#docker-image-and-backend-logic","text":"Make sure Docker is installed, more info here . On the project root folder, create a new Docker image, the example bellow uses unified-image as the image name: $ docker build -f docker/Dockerfile -t unified-image . Go to the project root folder and create a file called docker-compose.yml and adapt it to your needs. Example bellow: services: endurain: container_name: endurain image: unified-image # based on image that will be created above environment: - TZ=Europe/Lisbon # change if needed. Default is UTC - DB_TYPE=postgres - DB_HOST=postgres - DB_PORT=5432 - DB_PASSWORD=changeme - SECRET_KEY=changeme # openssl rand -hex 32 - FERNET_KEY=changeme # https://fernetkeygen.com or python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\" - GEOCODES_MAPS_API=changeme - ENDURAIN_HOST=http://localhost:8080 # change if needed - BEHIND_PROXY=false - ENVIRONMENT=development volumes: - <path_to_project_root_folder>/backend/app:/app/backend # this will replace the backend code logic with yours. Any changes in the code need a container reboot for them to apply ports: - \"8080:8080\" # change if needed depends_on: postgres: condition: service_healthy restart: unless-stopped postgres: image: postgres:latest container_name: postgres environment: - POSTGRES_PASSWORD=changeme - POSTGRES_DB=endurain - POSTGRES_USER=endurain - PGDATA=/var/lib/postgresql/data/pgdata ports: - \"5432:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U endurain\"] interval: 5s timeout: 5s retries: 5 volumes: - <path_to_container_folders>/postgres:/var/lib/postgresql/data restart: unless-stopped adminer: container_name: adminer image: adminer ports: - 8081:8080 restart: unless-stopped Start your project based on the docker compose file created before: $ docker compose up -d To stop the project: $ docker compose down To remove the create unified-image Docker image: $ docker image remove unified-image Backend uses Poetry for dependency management. You may need to install Python and Poetry if dependency management is necessary.","title":"Docker image and backend logic"},{"location":"developer-guide/#frontend","text":"Make sure you have an up-to-date version of Node.js installed. Go to the root of the project and move to frontend/app folder and install the dependencies: $ cd frontend/app $ npm install Create a file called .env.local inside frontend/app and add the following to it: VITE_ENDURAIN_HOST=http://localhost:8080 # Adapt this based on the docker compose of your dev environment After the dependencies are installed run the frontend: $ npm run dev After the frontend starts running, it should be available in the port 5173 . You should now be able to access the dev environment at http://localhost:5173 . Screenshot bellow shows the output from the npm run dev . Adapt the port based on the command output. Some processes, like token refresh may redirect your dev env from port 5173 to 8080 (or other, depending on your compose file). If this happens simply navigate again to 5173 .","title":"Frontend"},{"location":"developer-guide/#api-integration-v030","text":"Endurain supports integration with other apps:","title":"API Integration (v0.3.0+)"},{"location":"developer-guide/#api-requirements","text":"Add a header: Every request must include an X-Client-Type header with either web or mobile as the value. Requests with other values will receive a 403 error. Authorization: Every request must include an Authorization Bearer: <access token> header with a valid (new or refreshed) access token.","title":"API Requirements"},{"location":"developer-guide/#token-handling","text":"The backend will generate an access_token valid for 15 minutes and an refresh_token valid for 7 days. This follow the logic of short and longed lived tokens for auth session. The access_token is used for authorization; The refresh_token is used to refresh the access_token . For web apps , the backend sends access/refresh tokens as HTTP-only cookies. For mobile apps , tokens are included in the response body.","title":"Token Handling"},{"location":"developer-guide/#api-endpoints","text":"The API is reachable under /api/v1 . Below are some example endpoints. All endpoints information can be checked on the backend docs ( http://localhost:98/docs or http://ip_address:98/docs or https://domain/docs ): What Url Expected Information Authorize /token FORM with the fields username and password . This will be sent in clear text, use of HTTPS is highly recommended Refresh Token /refresh header Authorization Bearer: <Refresh Token> Activity Upload /activities/create/upload .gpx or .fit file Set Weight /health/weight JSON {'weight': , 'created_at': yyyy-MM-dd }","title":"API Endpoints"},{"location":"developer-guide/#supported-activity-types","text":"The table bellow details the activity types supported by Endurain: Name Value Run 1 Trail run 2 Virtual run 3 Road cycling 4 Gravel cycling 5 MTB cycling 6 Commuting cycling 27 Virtual cycling 7 Indoor swimming 8 Open water swimming 9 General workout 10 Walk 11 Hike 12 Rowing 13 Yoga 14 Alpine ski 15 Nordic Ski 16 Snowboard 17 Transition 18 Strength Training 19 Crossfit 20 Tennis 21 Table Tennis 22 Badminton 23 Squash 24 Racquetball 25 Pickleball 26","title":"Supported activity types"},{"location":"developer-guide/#supported-gear-types","text":"The table bellow details the gear types supported by Endurain: Name Value Bike 1 Shoes 2 Wetsuit 3 Racquet 4","title":"Supported gear types"},{"location":"gallery/","text":"Gallery Login page ** Image can be changed ** Home page Search page Activity page Activities pages Gears pages Health pages Summary page Profile page Settings pages ** Users administrator and server settings pages only visible to admin users **","title":"Gallery"},{"location":"gallery/#gallery","text":"","title":"Gallery"},{"location":"gallery/#login-page","text":"** Image can be changed **","title":"Login page"},{"location":"gallery/#home-page","text":"","title":"Home page"},{"location":"gallery/#search-page","text":"","title":"Search page"},{"location":"gallery/#activity-page","text":"","title":"Activity page"},{"location":"gallery/#activities-pages","text":"","title":"Activities pages"},{"location":"gallery/#gears-pages","text":"","title":"Gears pages"},{"location":"gallery/#health-pages","text":"","title":"Health pages"},{"location":"gallery/#summary-page","text":"","title":"Summary page"},{"location":"gallery/#profile-page","text":"","title":"Profile page"},{"location":"gallery/#settings-pages","text":"** Users administrator and server settings pages only visible to admin users **","title":"Settings pages"},{"location":"getting-started/","text":"Getting started Default Credentials Username: admin Password: admin Docker Deployment Endurain provides a Docker image for simplified deployment. To get started, check out the docker-compose.yml.example file in the project repository and adjust it according to your setup. Supported tags are: latest: contains the latest released version; version, example \"v0.3.0\": contains the app state available at the time of the version specified; development version, example \"dev_06092024\": contains a development version of the app at the date specified. This is not a stable released and may contain issues and bugs. Please do not open issues if using a version like this unless asked by me. Supported Environment Variables Table below shows supported environment variables. Variables marked with optional \"No\" should be set to avoid errors. Environment variable Default value Optional Notes UID 1000 Yes User ID for mounted volumes. Default is 1000 GID 1000 Yes Group ID for mounted volumes. Default is 1000 TZ UTC Yes Timezone definition. Useful for TZ calculation for activities that do not have coordinates associated, like indoor swim or weight training. If not specified UTC will be used. List of available time zones here . Format Europe/Lisbon expected ENDURAIN_HOST No default set No Required for internal communication and Strava. For Strava https must be used. Host or local ip (example: http://192.168.1.10:8080 or https://endurain.com) GEOCODES_MAPS_API No default set No Geocode maps offers a free plan consisting of 1 Request/Second. Registration necessary. DB_TYPE postgres Yes mariadb or postgres DB_HOST postgres Yes mariadb or postgres DB_PORT 5432 Yes 3306 or 5432 DB_USER endurain Yes N/A DB_PASSWORD No default set No N/A DB_DATABASE endurain Yes N/A SECRET_KEY No default set No Run openssl rand -hex 32 on a terminal to get a secret FERNET_KEY No default set No Run python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\" on a terminal to get a secret or go to https://fernetkeygen.com . Example output is 7NfMMRSCWcoNDSjqBX8WoYH9nTFk1VdQOdZY13po53Y= ALGORITHM HS256 Yes Currently only HS256 is supported ACCESS_TOKEN_EXPIRE_MINUTES 15 Yes Time in minutes REFRESH_TOKEN_EXPIRE_DAYS 7 Yes Time in days JAEGER_ENABLED false Yes N/A JAEGER_PROTOCOL http Yes N/A JAEGER_HOST jaeger Yes N/A JAGGER_PORT 4317 Yes N/A BEHIND_PROXY false Yes Change to true if behind reverse proxy ENVIRONMENT production Yes \"production\" and \"development\" allowed. \"development\" allows connections from localhost:8080 and localhost:5173 at the CORS level Table below shows the obligatory environment variables for mariadb container. You should set them based on what was also set for the Endurain container. Environemnt variable Default value Optional Notes MYSQL_ROOT_PASSWORD changeme No N/A MYSQL_DATABASE endurain No N/A MYSQL_USER endurain No N/A MYSQL_PASSWORD changeme No N/A Table below shows the obligatory environment variables for postgres container. You should set them based on what was also set for the Endurain container. Environemnt variable Default value Optional Notes POSTGRES_PASSWORD changeme No N/A POSTGRES_DB endurain No N/A POSTGRES_USER endurain No N/A PGDATA /var/lib/postgresql/data/pgdata No N/A To check Python backend dependencies used, use poetry file (pyproject.toml). Frontend dependencies: To check npm dependencies used, use npm file (package.json) Logo created on Canva Volumes Docker image uses a non-root user, so ensure target folders are not owned by root. Non-root user should use UID and GID 1000. It is recommended to configure the following volumes for data persistence: Volume Notes <local_path>/endurain/backend/files/bulk_import:/app/backend/files/bulk_import Necessary to enable bulk import of activities. Place here your activities files <local_path>/endurain/backend/files/processed:/app/backend/files/processed Necessary for processed original files persistence on container image updates <local_path>/endurain/backend/user_images:/app/backend/user_images Necessary for user image persistence on container image updates <local_path>/endurain/backend/server_images:/app/backend/server_images Necessary for server image persistence on container image updates <local_path>/endurain/backend/logs:/app/backend/logs Log files for the backend Bulk import and file upload .fit files are preferred. I noticed that Strava/Garmin Connect process of converting .fit to .gpx introduces additional data to the activity file leading to minor variances in the data, like for example additional meters in distance and elevation gain. Some notes: After the files are processed, the files are moved to the processed folder GEOCODES API has a limit of 1 Request/Second on the free plan, so if you have a large number of files, it might not be possible to import all in the same action Image personalization It is possible (v0.10.0 or higher) to personalize the login image in the login page. To do that, map the server_images directory for image persistence on container updates and: - Set the image in the server settings zone of the settings page - A square image is expected. Default one uses 1000px vs 1000px","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#default-credentials","text":"Username: admin Password: admin","title":"Default Credentials"},{"location":"getting-started/#docker-deployment","text":"Endurain provides a Docker image for simplified deployment. To get started, check out the docker-compose.yml.example file in the project repository and adjust it according to your setup. Supported tags are: latest: contains the latest released version; version, example \"v0.3.0\": contains the app state available at the time of the version specified; development version, example \"dev_06092024\": contains a development version of the app at the date specified. This is not a stable released and may contain issues and bugs. Please do not open issues if using a version like this unless asked by me.","title":"Docker Deployment"},{"location":"getting-started/#supported-environment-variables","text":"Table below shows supported environment variables. Variables marked with optional \"No\" should be set to avoid errors. Environment variable Default value Optional Notes UID 1000 Yes User ID for mounted volumes. Default is 1000 GID 1000 Yes Group ID for mounted volumes. Default is 1000 TZ UTC Yes Timezone definition. Useful for TZ calculation for activities that do not have coordinates associated, like indoor swim or weight training. If not specified UTC will be used. List of available time zones here . Format Europe/Lisbon expected ENDURAIN_HOST No default set No Required for internal communication and Strava. For Strava https must be used. Host or local ip (example: http://192.168.1.10:8080 or https://endurain.com) GEOCODES_MAPS_API No default set No Geocode maps offers a free plan consisting of 1 Request/Second. Registration necessary. DB_TYPE postgres Yes mariadb or postgres DB_HOST postgres Yes mariadb or postgres DB_PORT 5432 Yes 3306 or 5432 DB_USER endurain Yes N/A DB_PASSWORD No default set No N/A DB_DATABASE endurain Yes N/A SECRET_KEY No default set No Run openssl rand -hex 32 on a terminal to get a secret FERNET_KEY No default set No Run python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\" on a terminal to get a secret or go to https://fernetkeygen.com . Example output is 7NfMMRSCWcoNDSjqBX8WoYH9nTFk1VdQOdZY13po53Y= ALGORITHM HS256 Yes Currently only HS256 is supported ACCESS_TOKEN_EXPIRE_MINUTES 15 Yes Time in minutes REFRESH_TOKEN_EXPIRE_DAYS 7 Yes Time in days JAEGER_ENABLED false Yes N/A JAEGER_PROTOCOL http Yes N/A JAEGER_HOST jaeger Yes N/A JAGGER_PORT 4317 Yes N/A BEHIND_PROXY false Yes Change to true if behind reverse proxy ENVIRONMENT production Yes \"production\" and \"development\" allowed. \"development\" allows connections from localhost:8080 and localhost:5173 at the CORS level Table below shows the obligatory environment variables for mariadb container. You should set them based on what was also set for the Endurain container. Environemnt variable Default value Optional Notes MYSQL_ROOT_PASSWORD changeme No N/A MYSQL_DATABASE endurain No N/A MYSQL_USER endurain No N/A MYSQL_PASSWORD changeme No N/A Table below shows the obligatory environment variables for postgres container. You should set them based on what was also set for the Endurain container. Environemnt variable Default value Optional Notes POSTGRES_PASSWORD changeme No N/A POSTGRES_DB endurain No N/A POSTGRES_USER endurain No N/A PGDATA /var/lib/postgresql/data/pgdata No N/A To check Python backend dependencies used, use poetry file (pyproject.toml). Frontend dependencies: To check npm dependencies used, use npm file (package.json) Logo created on Canva","title":"Supported Environment Variables"},{"location":"getting-started/#volumes","text":"Docker image uses a non-root user, so ensure target folders are not owned by root. Non-root user should use UID and GID 1000. It is recommended to configure the following volumes for data persistence: Volume Notes <local_path>/endurain/backend/files/bulk_import:/app/backend/files/bulk_import Necessary to enable bulk import of activities. Place here your activities files <local_path>/endurain/backend/files/processed:/app/backend/files/processed Necessary for processed original files persistence on container image updates <local_path>/endurain/backend/user_images:/app/backend/user_images Necessary for user image persistence on container image updates <local_path>/endurain/backend/server_images:/app/backend/server_images Necessary for server image persistence on container image updates <local_path>/endurain/backend/logs:/app/backend/logs Log files for the backend","title":"Volumes"},{"location":"getting-started/#bulk-import-and-file-upload","text":".fit files are preferred. I noticed that Strava/Garmin Connect process of converting .fit to .gpx introduces additional data to the activity file leading to minor variances in the data, like for example additional meters in distance and elevation gain. Some notes: After the files are processed, the files are moved to the processed folder GEOCODES API has a limit of 1 Request/Second on the free plan, so if you have a large number of files, it might not be possible to import all in the same action","title":"Bulk import and file upload"},{"location":"getting-started/#image-personalization","text":"It is possible (v0.10.0 or higher) to personalize the login image in the login page. To do that, map the server_images directory for image persistence on container updates and: - Set the image in the server settings zone of the settings page - A square image is expected. Default one uses 1000px vs 1000px","title":"Image personalization"},{"location":"integrations/3rd-party-apps/","text":"3rd party apps RunnerUp Integration RunnerUp an app for tracking your sport activities with your Android phone, can automatically sync your activities recorded with it to your Endurain instance. RunnerUp is supported until version v0.5.3 of Endurain. An issue is opened to get support for v0.6.0+.","title":"3rd party apps"},{"location":"integrations/3rd-party-apps/#3rd-party-apps","text":"","title":"3rd party apps"},{"location":"integrations/3rd-party-apps/#runnerup-integration","text":"RunnerUp an app for tracking your sport activities with your Android phone, can automatically sync your activities recorded with it to your Endurain instance. RunnerUp is supported until version v0.5.3 of Endurain. An issue is opened to get support for v0.6.0+.","title":"RunnerUp Integration"},{"location":"integrations/3rd-party-services/","text":"3rd party services Strava Integration \u26a0\ufe0f Warning Due to recent Strava API changes, expect changes in the Strava integration in a following release. To enable Strava integration, ensure your Endurain instance is accessible from the internet and follow Strava's API setup guide . After the integration is successful the access and refresh tokens are stored in the DB. Each user will have his/hers own pair. Once the integration with Strava is configured, on startup and every hour the backend will check if there is new unimported activities. If yes, the new activity is automatically imported. On link, user will need to provide his/her API client ID and secret. Pair will be temporary stored in the DB until the process finishes. Info is sent on a JSON payload and HTTPS end2end is encouraged. On Strava unlink action every data imported from Strava, i.e. activities and gears, will be deleted according to Strava API Agreement . For Strava integration stravalib Python module is used. Garmin Connect Integration To enable Garmin Connect integration, Endurain will ask for your Garmin Connect credentials. These credentials are not stored, but the authentication tokens (access and refresh tokens) are stored in the DB, similar to the Strava integration. The credentials are sent from the frontend to the backend in plain text, so the use of HTTPS is highly recommended. Once the integration with Garmin Connect is configured, on startup, every one and four hours the backend will check if there is new unimported activities and new body composition entries respectively. If yes, the new data is automatically imported. For Garmin Connect integration python-garminconnect Python module is used.","title":"3rd party services"},{"location":"integrations/3rd-party-services/#3rd-party-services","text":"","title":"3rd party services"},{"location":"integrations/3rd-party-services/#strava-integration","text":"\u26a0\ufe0f Warning Due to recent Strava API changes, expect changes in the Strava integration in a following release. To enable Strava integration, ensure your Endurain instance is accessible from the internet and follow Strava's API setup guide . After the integration is successful the access and refresh tokens are stored in the DB. Each user will have his/hers own pair. Once the integration with Strava is configured, on startup and every hour the backend will check if there is new unimported activities. If yes, the new activity is automatically imported. On link, user will need to provide his/her API client ID and secret. Pair will be temporary stored in the DB until the process finishes. Info is sent on a JSON payload and HTTPS end2end is encouraged. On Strava unlink action every data imported from Strava, i.e. activities and gears, will be deleted according to Strava API Agreement . For Strava integration stravalib Python module is used.","title":"Strava Integration"},{"location":"integrations/3rd-party-services/#garmin-connect-integration","text":"To enable Garmin Connect integration, Endurain will ask for your Garmin Connect credentials. These credentials are not stored, but the authentication tokens (access and refresh tokens) are stored in the DB, similar to the Strava integration. The credentials are sent from the frontend to the backend in plain text, so the use of HTTPS is highly recommended. Once the integration with Garmin Connect is configured, on startup, every one and four hours the backend will check if there is new unimported activities and new body composition entries respectively. If yes, the new data is automatically imported. For Garmin Connect integration python-garminconnect Python module is used.","title":"Garmin Connect Integration"}]}