{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Endurain    <p>     A self-hosted fitness tracking service - Mastodon profile - Discord server </p>"},{"location":"#what-is-endurain","title":"What is Endurain?","text":"<p>Endurain is a self-hosted fitness tracking service designed to give users full control over their data and hosting environment. Built with:</p> <ul> <li>Frontend: Vue.js, Notivue and Bootstrap CSS</li> <li>Backend: Python FastAPI, Alembic, SQLAlchemy, Apprise, stravalib and python-garminconnect for Strava and Garmin Connect integration, gpxpy, tcxreader and fitdecode for .gpx, .tcx and .fit file import respectively </li> <li>Database: MariaDB or PostgreSQL for efficient data management</li> <li>Observability: Jaeger for basic tracing and monitoring</li> </ul> <p>To deploy Endurain, a Docker image is available, and a comprehensive example can be found in the \"docker-compose.yml.example\" file provided in the project repository. Configuration is facilitated through environment variables, ensuring flexibility and ease of customization.</p>"},{"location":"#developers-note","title":"Developer's Note","text":"<p>As a non-professional developer, my journey with Endurain involved learning and implementing new technologies and concepts, with invaluable assistance from ChatGPT. The primary motivation behind this project was to gain hands-on experience and expand my understanding of modern development practices. Second motivation is that I'm an amateur triathlete and I want to keep track of my gear and gear components usage.</p> <p>If you have any recommendations or insights on improving any aspect of Endurain, whether related to technology choices, user experience, or any other relevant area, I would greatly appreciate your input. The goal is to create a reliable and user-friendly fitness tracking solution that caters to the needs of individuals who prefer self-hosted applications. Your constructive feedback will undoubtedly contribute to the refinement of Endurain.</p>"},{"location":"#features","title":"Features","text":"<p>Endurain currently supports:</p> <ul> <li>Multi-user functionality with admin and user profiles adaptable interfaces</li> <li>Activity import via manual or bulk upload (.gpx, .tcx and .fit files. .fit files are preferred)</li> <li>Strava integration for syncing activities and gear</li> <li>Garmin Connect integration for syncing activities, gear and body composition</li> <li>Activity feeds and statistics (week/month)</li> <li>Basic activity privacy settings</li> <li>Gear tracking (wetsuits, bicycles, shoes, racquets, skis, snowboards)</li> <li>Gear component tracking (e.g., track when components like bike chains need replacing)</li> <li>Default gear for activity types</li> <li>User pages with stats and activity histories</li> <li>Follower features (view activities)</li> <li>Multi-language support</li> <li>Imperial and metric units support</li> <li>Dark/light theme switcher</li> <li>Third-party app support</li> <li>Weight logging</li> <li>Notification system</li> <li>Define and track goals</li> <li>MFA TOTP support</li> <li>Password reset through email link. Uses Apprise for email notifications</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<p>Upcoming features (in no particular order):</p> <ul> <li>Live tracking</li> <li>Activity comments and likes</li> <li>Potential ActivityPub integration</li> </ul>"},{"location":"#sponsors","title":"Sponsors","text":"<p>A huge thank you to the project sponsors! Your support helps keep this project going.</p> <p>Consider sponsoring Endurain on GitHub to ensure continuous development.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcomed! Please open an issue to discuss any changes or improvements before submitting a PR. Check out the Contributing Guidelines for more details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the AGPL-3.0 or later License.</p>"},{"location":"#help-translate","title":"Help Translate","text":"<p>Endurain has multi-language support, and you can help translate it into more languages via Crowdin. </p> <p>Currently supported in:</p> <ul> <li>Catalan by @rubenixnagios</li> <li>Chinese Simplified</li> <li>Chinese Traditional</li> <li>German by @ThreeCO</li> <li>French (FR) @gwenvador</li> <li>GALICIAN (GL)</li> <li>Dutch (NL) @woutvanderaa</li> <li>Portuguese (PT)</li> <li>Spanish (ES) @rgmelkor and @tinchodin</li> <li>English (US)</li> </ul>"},{"location":"#star-history","title":"Star History","text":""},{"location":"developer-guide/","title":"Developer guide","text":""},{"location":"developer-guide/#setup-a-dev-environment","title":"Setup a dev environment","text":"<p>Bellow are the steps to create a dev environment. Examples bellow will use Endurain repo, but you should adapt those for your scenario (forked repo, etc).</p> <ul> <li>Clone the repo to your dev machine:</li> </ul> <pre><code>$ cd &lt;folder_to_store_code&gt;\n$ git clone https://github.com/joaovitoriasilva/endurain.git # this will clone the repo structure to the previous folder inside a folder called endurain\n</code></pre>"},{"location":"developer-guide/#docker-image-and-backend-logic","title":"Docker image and backend logic","text":"<p>Make sure Docker is installed, more info here.</p> <ul> <li>On the project root folder, create a new Docker image, the example bellow uses <code>unified-image</code> as the image name:</li> </ul> <pre><code>$ docker build -f docker/Dockerfile -t unified-image .\n</code></pre> <ul> <li>Go to the project root folder and create a file called <code>docker-compose.yml</code> and adapt it to your needs. Example bellow:</li> </ul> <pre><code>services:\n    endurain:\n        container_name: endurain\n        image: unified-image # based on image that will be created above\n        environment:\n            - TZ=Europe/Lisbon # change if needed. Default is UTC\n            - DB_TYPE=postgres\n            - DB_HOST=postgres\n            - DB_PORT=5432\n            - DB_PASSWORD=changeme\n            - SECRET_KEY=changeme # openssl rand -hex 32\n            - FERNET_KEY=changeme # https://fernetkeygen.com or python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"\n            - GEOCODES_MAPS_API=changeme\n            - ENDURAIN_HOST=http://localhost:8080 # change if needed\n            - BEHIND_PROXY=false\n            - ENVIRONMENT=development\n        volumes:\n            - &lt;path_to_project_root_folder&gt;/backend/app:/app/backend # this will replace the backend code logic with yours. Any changes in the code need a container reboot for them to apply\n        ports:\n            - \"8080:8080\" # change if needed\n        depends_on:\n            postgres:\n                condition: service_healthy\n        restart: unless-stopped\n\n    postgres:\n        image: postgres:latest\n        container_name: postgres\n        environment:\n            - POSTGRES_PASSWORD=changeme\n            - POSTGRES_DB=endurain\n            - POSTGRES_USER=endurain\n            - PGDATA=/var/lib/postgresql/data/pgdata\n        ports:\n            - \"5432:5432\"\n        healthcheck:\n            test: [\"CMD-SHELL\", \"pg_isready -U endurain\"]\n            interval: 5s\n            timeout: 5s\n            retries: 5\n        volumes:\n            - &lt;path_to_container_folders&gt;/postgres:/var/lib/postgresql/data\n        restart: unless-stopped\n\n    adminer:\n        container_name: adminer\n        image: adminer\n        ports:\n            - 8081:8080\n        restart: unless-stopped\n</code></pre> <ul> <li>Start your project based on the docker compose file created before:</li> </ul> <pre><code>$ docker compose up -d\n</code></pre> <ul> <li>To stop the project:</li> </ul> <pre><code>$ docker compose down\n</code></pre> <ul> <li>To remove the create <code>unified-image</code> Docker image:</li> </ul> <pre><code>$ docker image remove unified-image\n</code></pre> <ul> <li>Backend uses Poetry for dependency management. You may need to install Python and Poetry if dependency management is necessary.</li> </ul>"},{"location":"developer-guide/#frontend","title":"Frontend","text":"<p>Make sure you have an up-to-date version of Node.js installed.</p> <ul> <li>Go to the root of the project and move to frontend/app folder and install the dependencies:</li> </ul> <pre><code>$ cd frontend/app\n$ npm install\n</code></pre> <ul> <li>Create a file called <code>.env.local</code> inside frontend/app and add the following to it:</li> </ul> <pre><code>VITE_ENDURAIN_HOST=http://localhost:8080 # Adapt this based on the docker compose of your dev environment\n</code></pre> <ul> <li>After the dependencies are installed run the frontend:</li> </ul> <pre><code>$ npm run dev\n</code></pre> <ul> <li>After the frontend starts running, it should be available in the port <code>5173</code>. You should now be able to access the dev environment at <code>http://localhost:5173</code>. Screenshot bellow shows the output from the <code>npm run dev</code>. Adapt the port based on the command output.</li> </ul> <p></p> <ul> <li>Some processes, like token refresh may redirect your dev env from port <code>5173</code> to <code>8080</code> (or other, depending on your compose file). If this happens simply navigate again to <code>5173</code>.</li> </ul>"},{"location":"developer-guide/#api-integration-v030","title":"API Integration (v0.3.0+)","text":"<p>Endurain supports integration with other apps:</p>"},{"location":"developer-guide/#api-requirements","title":"API Requirements","text":"<ul> <li>Add a header: Every request must include an <code>X-Client-Type</code> header with either <code>web</code> or <code>mobile</code> as the value. Requests with other values will receive a <code>403</code> error.</li> <li>Authorization: Every request must include an <code>Authorization Bearer: &lt;access token&gt;</code> header with a valid (new or refreshed) access token.</li> </ul>"},{"location":"developer-guide/#token-handling","title":"Token Handling","text":"<ul> <li>The backend will generate an <code>access_token</code> valid for 15 minutes and an <code>refresh_token</code> valid for 7 days. This follow the logic of short and longed lived tokens for auth session.</li> <li>The <code>access_token</code> is used for authorization; The <code>refresh_token</code> is used to refresh the <code>access_token</code>.</li> <li>For web apps, the backend sends access/refresh tokens as HTTP-only cookies.</li> <li>For mobile apps, tokens are included in the response body.</li> </ul>"},{"location":"developer-guide/#api-endpoints","title":"API Endpoints","text":"<p>The API is reachable under <code>/api/v1</code>. Below are some example endpoints. All endpoints information can be checked on the backend docs (<code>http://localhost:98/docs</code> or <code>http://ip_address:98/docs</code> or <code>https://domain/docs</code>):</p> What Url Expected Information Authorize <code>/token</code> <code>FORM</code> with the fields <code>username</code> and <code>password</code>. This will be sent in clear text, use of HTTPS is highly recommended Refresh Token <code>/refresh</code> header <code>Authorization Bearer: &lt;Refresh Token&gt;</code> Activity Upload <code>/activities/create/upload</code> .gpx, .tcx, .gz or .fit file Set Weight <code>/health/weight</code> JSON {'weight': , 'created_at': <code>yyyy-MM-dd</code>}"},{"location":"developer-guide/#mfa-authentication-flow","title":"MFA Authentication Flow","text":"<p>When Multi-Factor Authentication (MFA) is enabled for a user, the authentication process requires two steps:</p>"},{"location":"developer-guide/#step-1-initial-login-request","title":"Step 1: Initial Login Request","text":"<p>Make a standard login request to <code>/token</code>:</p> <p>Request:</p> <pre><code>POST /api/v1/token\nContent-Type: application/x-www-form-urlencoded\nX-Client-Type: web|mobile\n\nusername=user@example.com&amp;password=userpassword\n</code></pre> <p>Response (when MFA is enabled): - Web clients: HTTP 202 Accepted   <code>json   {     \"mfa_required\": true,     \"username\": \"example\",     \"message\": \"MFA verification required\"   }</code> - Mobile clients: HTTP 200 OK   <code>json   {     \"mfa_required\": true,     \"username\": \"example\",     \"message\": \"MFA verification required\"   }</code></p>"},{"location":"developer-guide/#step-2-mfa-verification","title":"Step 2: MFA Verification","text":"<p>Complete the login by providing the MFA code to <code>/mfa/verify</code>:</p> <p>Request:</p> <pre><code>POST /api/v1/mfa/verify\nContent-Type: application/json\nX-Client-Type: web|mobile\n\n{\n  \"username\": \"user@example.com\",\n  \"mfa_code\": \"123456\"\n}\n</code></pre> <p>Response (successful verification): - Web clients: Tokens are set as HTTP-only cookies   <code>json   {     \"session_id\": \"unique_session_id\"   }</code> - Mobile clients: Tokens are returned in response body   <code>json   {     \"access_token\": \"eyJ...\",     \"refresh_token\": \"eyJ...\",     \"session_id\": \"unique_session_id\"   }</code></p>"},{"location":"developer-guide/#error-handling","title":"Error Handling","text":"<ul> <li>No pending MFA login: HTTP 400 Bad Request   <code>json   {     \"detail\": \"No pending MFA login found for this username\"   }</code></li> <li>Invalid MFA code: HTTP 401 Unauthorized   <code>json   {     \"detail\": \"Invalid MFA code\"   }</code></li> </ul>"},{"location":"developer-guide/#important-notes","title":"Important Notes","text":"<ul> <li>The pending MFA login session is temporary and will expire if not completed within a reasonable time</li> <li>After successful MFA verification, the pending login is automatically cleaned up</li> <li>The user must still be active at the time of MFA verification</li> <li>If no MFA is enabled for the user, the standard single-step authentication flow applies</li> </ul>"},{"location":"developer-guide/#supported-activity-types","title":"Supported activity types","text":"<p>The table bellow details the activity types supported by Endurain.</p> Name Value Run 1 Trail run 2 Track run 34 Virtual run 3 Road cycling 4 Gravel cycling 5 MTB cycling 6 Commuting cycling 27 Mixed surface cycling 29 Virtual cycling 7 Indoor cycling 28 E-Bike cycling 35 E-Bike mountain cycling 36 Indoor swimming 8 Open water swimming 9 General workout 10 Walk 11 Indoor walk 31 Hike 12 Rowing 13 Yoga 14 Alpine ski 15 Nordic Ski 16 Snowboard 17 Ice Skate 37 Transition 18 Strength Training 19 Crossfit 20 Tennis 21 Table Tennis 22 Badminton 23 Squash 24 Racquetball 25 Pickleball 26 Padel 39 Windsurf 30 Stand up paddling 32 Surf 33 Soccer 38"},{"location":"developer-guide/#supported-gear-types","title":"Supported gear types","text":"<p>The table bellow details the gear types supported by Endurain.</p> Name Value Notes bike 1 N/A shoes 2 N/A wetsuit 3 N/A racquet 4 N/A ski 5 N/A snowboard 6 N/A windsurf 7 N/A water_sports_board 8 Example: stand up paddle and surf board"},{"location":"developer-guide/#supported-bike-component-gear-types","title":"Supported bike component gear types","text":"<p>The table bellow details the bike gear component types supported by Endurain:</p> Value back_break_oil back_break_pads back_break_rotor back_tire back_tube back_tubeless_sealant back_tubeless_rim_tape back_wheel back_wheel_valve bottom_bracket bottle_cage cassette chain computer_mount crank_left_power_meter crank_right_power_meter crankset crankset_power_meter fork frame front_break_oil front_break_pads front_break_rotor front_derailleur front_shifter front_tire front_tube front_tubeless_sealant front_tubeless_rim_tape front_wheel front_wheel_valve grips handlebar handlebar_tape headset pedals pedals_left_power_meter pedals_power_meter pedals_right_power_meter rear_derailleur rear_shifter saddle seatpost stem"},{"location":"developer-guide/#supported-shoes-component-gear-types","title":"Supported shoes component gear types","text":"<p>The table bellow details the shoes component gear types supported by Endurain:</p> Value cleats insoles laces"},{"location":"developer-guide/#supported-racquet-component-gear-types","title":"Supported racquet component gear types","text":"<p>The table bellow details the racquet component gear types supported by Endurain:</p> Value basegrip bumpers grommets overgrip strings"},{"location":"developer-guide/#supported-windsurf-component-gear-types","title":"Supported windsurf component gear types","text":"<p>The table bellow details the windsurf component gear types supported by Endurain:</p> Value sail board mast boom mast_extension mast_base mast_universal_joint fin footstraps harness_lines rigging_lines footpad impact_vest lifeguard_vest helmet wing front_foil stabilizer fuselage"},{"location":"gallery/","title":"Gallery","text":""},{"location":"gallery/#login-page","title":"Login page","text":"<p>Image can be changed </p>"},{"location":"gallery/#home-page","title":"Home page","text":""},{"location":"gallery/#search-page","title":"Search page","text":""},{"location":"gallery/#activity-page","title":"Activity page","text":""},{"location":"gallery/#activities-pages","title":"Activities pages","text":""},{"location":"gallery/#gears-pages","title":"Gears pages","text":""},{"location":"gallery/#health-pages","title":"Health pages","text":""},{"location":"gallery/#summary-page","title":"Summary page","text":""},{"location":"gallery/#profile-page","title":"Profile page","text":""},{"location":"gallery/#settings-pages","title":"Settings pages","text":"<p> Users administrator and server settings pages only visible to admin users </p>"},{"location":"getting-started/advanced-started/","title":"Getting started advanced","text":""},{"location":"getting-started/advanced-started/#default-credentials","title":"Default Credentials","text":"<ul> <li>Username: admin  </li> <li>Password: admin</li> </ul>"},{"location":"getting-started/advanced-started/#docker-deployment","title":"Docker Deployment","text":"<p>Endurain provides a Docker image for simplified deployment. To get started, check out the <code>docker-compose.yml.example</code> file in the project repository and adjust it according to your setup. Supported tags are:</p> <ul> <li>latest: contains the latest released version;</li> <li>version, example \"v0.3.0\": contains the app state available at the time of the version specified;</li> <li>development version, example \"dev_06092024\": contains a development version of the app at the date specified. This is not a stable released and may contain issues and bugs. Please do not open issues if using a version like this unless asked by me.</li> </ul>"},{"location":"getting-started/advanced-started/#supported-environment-variables","title":"Supported Environment Variables","text":"<p>Table below shows supported environment variables. Variables marked with optional \"No\" should be set to avoid errors.</p> Environment variable Default value Optional Notes UID 1000 Yes User ID for mounted volumes. Default is 1000 GID 1000 Yes Group ID for mounted volumes. Default is 1000 TZ UTC Yes Timezone definition. Useful for TZ calculation for activities that do not have coordinates associated, like indoor swim or weight training. If not specified UTC will be used. List of available time zones here. Format <code>Europe/Lisbon</code> expected ENDURAIN_HOST No default set <code>No</code> Required for internal communication and Strava. For Strava https must be used. Host or local ip (example: http://192.168.1.10:8080 or https://endurain.com) REVERSE_GEO_PROVIDER nominatim Yes Defines reverse geo provider. Expects geocode, photon or nominatim. photon can be the SaaS by komoot or a self hosted version like a self hosted version. Like photon, Nominatim can be the SaaS or a self hosted version PHOTON_API_HOST photon.komoot.io Yes API host for photon. By default it uses the SaaS by komoot PHOTON_API_USE_HTTPS true Yes Protocol used by photon. By default uses HTTPS to be inline with what SaaS by komoot expects NOMINATIM_API_HOST nominatim.openstreetmap.org Yes API host for Nominatim. By default it uses the SaaS NOMINATIM_API_USE_HTTPS true Yes Protocol used by Nominatim. By default uses HTTPS to be inline with what SaaS expects GEOCODES_MAPS_API changeme Yes Geocode maps offers a free plan consisting of 1 Request/Second. Registration necessary. REVERSE_GEO_RATE_LIMIT 1 Yes Change this if you have a paid Geocode maps tier. Other providers also use this variable. Keep it as is if you use photon or Nominatim to keep 1 request per second DB_TYPE postgres Yes mariadb or postgres DB_HOST postgres Yes mariadb or postgres DB_PORT 5432 Yes 3306 or 5432 DB_USER endurain Yes N/A DB_PASSWORD No default set <code>No</code> Database password. Alternatively, use <code>DB_PASSWORD_FILE</code> for Docker secrets DB_DATABASE endurain Yes N/A SECRET_KEY No default set <code>No</code> Run <code>openssl rand -hex 32</code> on a terminal to get a secret. Alternatively, use <code>SECRET_KEY_FILE</code> for Docker secrets FERNET_KEY No default set <code>No</code> Run <code>python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"</code> on a terminal to get a secret or go to https://fernetkeygen.com. Example output is <code>7NfMMRSCWcoNDSjqBX8WoYH9nTFk1VdQOdZY13po53Y=</code>. Alternatively, use <code>FERNET_KEY_FILE</code> for Docker secrets ALGORITHM HS256 Yes Currently only HS256 is supported ACCESS_TOKEN_EXPIRE_MINUTES 15 Yes Time in minutes REFRESH_TOKEN_EXPIRE_DAYS 7 Yes Time in days JAEGER_ENABLED false Yes N/A JAEGER_PROTOCOL http Yes N/A JAEGER_HOST jaeger Yes N/A JAEGER_PORT 4317 Yes N/A BEHIND_PROXY false Yes Change to true if behind reverse proxy ENVIRONMENT production Yes \"production\" and \"development\" allowed. \"development\" allows connections from localhost:8080 and localhost:5173 at the CORS level SMTP_HOST No default set Yes The SMTP host of your email provider. Example <code>smtp.protonmail.ch</code> SMTP_PORT 587 Yes The SMTP port of your email provider. Default is 587 SMTP_USERNAME No default set Yes The username of your SMTP email provider, probably your email address SMTP_PASSWORD No default set Yes The password of your SMTP email provider. Some providers allow the use of your account password, others require the creation of an app password. Please refer to your provider documentation SMTP_SECURE true Yes By default it uses secure communications. Accepted values are <code>true</code> and <code>false</code> SMTP_SECURE_TYPE starttls Yes If SMTP_SECURE is set you can set the communication type. Accepted values are <code>starttls</code> and <code>ssl</code> <p>Table below shows the obligatory environment variables for mariadb container. You should set them based on what was also set for the Endurain container.</p> Environemnt variable Default value Optional Notes MYSQL_ROOT_PASSWORD changeme <code>No</code> N/A MYSQL_DATABASE endurain <code>No</code> N/A MYSQL_USER endurain <code>No</code> N/A MYSQL_PASSWORD changeme <code>No</code> N/A <p>Table below shows the obligatory environment variables for postgres container. You should set them based on what was also set for the Endurain container.</p> Environemnt variable Default value Optional Notes POSTGRES_PASSWORD changeme <code>No</code> N/A POSTGRES_DB endurain <code>No</code> N/A POSTGRES_USER endurain <code>No</code> N/A PGDATA /var/lib/postgresql/data/pgdata <code>No</code> N/A <p>To check Python backend dependencies used, use poetry file (pyproject.toml).</p> <p>Frontend dependencies:</p> <ul> <li>To check npm dependencies used, use npm file (package.json)</li> <li>Logo created on Canva</li> </ul>"},{"location":"getting-started/advanced-started/#docker-secrets-support","title":"Docker Secrets Support","text":"<p>Endurain supports Docker secrets for securely managing sensitive environment variables. For the following environment variables, you can use <code>_FILE</code> variants that read the secret from a file instead of storing it directly in environment variables:</p> <ul> <li><code>DB_PASSWORD</code> \u2192 <code>DB_PASSWORD_FILE</code></li> <li><code>SECRET_KEY</code> \u2192 <code>SECRET_KEY_FILE</code></li> <li><code>FERNET_KEY</code> \u2192 <code>FERNET_KEY_FILE</code></li> </ul>"},{"location":"getting-started/advanced-started/#using-file-based-secrets","title":"Using File-Based Secrets","text":"<p>Use file-based secrets to securely manage sensitive environment variables:</p> <ol> <li>Create a secrets directory with proper permissions:</li> </ol> <pre><code>mkdir -p secrets\nchmod 700 secrets\n</code></pre> <ol> <li>Create secret files with strong passwords:</li> </ol> <pre><code># Use randomly generated passwords, not hardcoded ones\necho \"$(openssl rand -base64 32)\" &gt; secrets/db_password.txt\necho \"$(openssl rand -hex 32)\" &gt; secrets/secret_key.txt\necho \"$(python3 -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\")\" &gt; secrets/fernet_key.txt\n\n# Set secure file permissions\nchmod 600 secrets/*.txt\nchown $(id -u):$(id -g) secrets/*.txt\n</code></pre> <ol> <li>Configure docker-compose.yml:</li> </ol> <pre><code>services:\n  endurain:\n    environment:\n      - DB_PASSWORD_FILE=/run/secrets/db_password\n      - SECRET_KEY_FILE=/run/secrets/secret_key\n      - FERNET_KEY_FILE=/run/secrets/fernet_key\n    secrets:\n      - db_password\n      - secret_key\n      - fernet_key\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n  secret_key:\n    file: ./secrets/secret_key.txt\n  fernet_key:\n    file: ./secrets/fernet_key.txt\n</code></pre> <p>Note: When using <code>_FILE</code> variants, the original environment variables (e.g., <code>DB_PASSWORD</code>) are not needed. The application will automatically read from the file specified by the <code>_FILE</code> environment variable.</p>"},{"location":"getting-started/advanced-started/#volumes","title":"Volumes","text":"<p>Docker image uses a non-root user, so ensure target folders are not owned by root. Non-root user should use UID and GID 1000. It is recommended to configure the following volumes for data persistence:</p> Volume Notes <code>&lt;local_path&gt;/endurain/backend/logs:/app/backend/logs</code> Log files for the backend <code>&lt;local_path&gt;/endurain/backend/data:/app/backend/data</code> Necessary for image and activity files persistence on docker image update"},{"location":"getting-started/advanced-started/#bulk-import-and-file-upload","title":"Bulk import and file upload","text":"<p>To perform a bulk import: - Place .fit, .tcx, .gz and/or .gpx files into the data/activity_files/bulk_import folder. Create the folder if needed. - In the \"Settings\" menu select \"Import\". - Click \"Import\" next to \"Bulk Import\".</p> <p>.fit files are preferred. I noticed that Strava/Garmin Connect process of converting .fit to .gpx introduces additional data to the activity file leading to minor variances in the data, like for example additional  meters in distance and elevation gain. Some notes:</p> <ul> <li>After the files are processed, the files are moved to the processed folder</li> <li>GEOCODES API has a limit of 1 Request/Second on the free plan, so if you have a large number of files, it might not be possible to import all in the same action</li> <li>The bulk import currently only imports data present in the .fit, .tcx or .gpx files - no metadata or other media are imported.</li> </ul>"},{"location":"getting-started/advanced-started/#importing-information-from-a-strava-bulk-export-beta","title":"Importing information from a Strava bulk export (BETA)","text":"<p>Strava allows users to create a bulk export of their historical activity on the site. This information is stored in a zip file, primarily as .csv files, GPS recording files (e.g., .gpx, .fit), and media files (e.g., .jpg, .png).</p>"},{"location":"getting-started/advanced-started/#importing-gear-from-a-strava-bulk-export","title":"Importing gear from a Strava bulk export","text":""},{"location":"getting-started/advanced-started/#bike-import","title":"Bike import","text":"<p>At the present time, importing bikes from a Strava bulk export is implemented as a beta feature - use with caution.  Components of bikes are not imported - just the bikes themselves.  There is no mechanism present to undo an import.</p> <p>To perform an import of bikes:  - Place the bikes.csv file from a Strava bulk export into the data/activity_files/bulk_import folder. Create the folder if needed; - In the <code>Settings</code> menu select <code>Import</code>; - Click <code>Import Strava Bikes</code> next to <code>Strava gear import</code>; - Upon successful import, the bikes.csv file is moved to /data/activity_files/processed folder; - Status messages about the import, including why any gear was not imported, can be found in the logs.</p> <p>Ensure the file is named <code>bikes.csv</code> and has a header row with at least the fields 'Bike Name', 'Bike Brand', and 'Bike Model'.</p>"},{"location":"getting-started/advanced-started/#shoe-import","title":"Shoe import","text":"<p>At the present time, importing shoes from a Strava bulk export is implemented as a beta feature - use with caution.  Components of shooes are not imported - just the shoes themselves. </p> <p>To perform an import of shoes:  - Place the shoes.csv file from a Strava bulk export into the data/activity_files/bulk_import folder. Create the folder if needed; - In the <code>Settings</code> menu select <code>Import</code>; - Click <code>Shoes import</code> next to <code>Strava gear import</code>; - Upon successful import, the shoes.csv file is moved to /data/activity_files/processed folder; - Status messages about the import, including why any gear was not imported, can be found in the logs.</p> <p>Ensure the file is named <code>shoes.csv</code> and has a header row with at least the fields 'Shoe Name', 'Shoe Brand', and 'Shoe Model'.</p> <p>Note that Strava allows blank shoe names, but Endurain does not.  Shoes with a blank name will thus be given a default name of <code>Unnamed Shoe #</code> on import.</p>"},{"location":"getting-started/advanced-started/#notes-on-importing-gear","title":"Notes on importing gear","text":"<p>NOTE: There is currently no mechanism to undo a gear import.</p> <p>All gear will be imported as active, as Strava does not export the active/inactive status of the gear.</p> <p>Note that Endurain does not allow the <code>+</code> character in gear field names, and thus +'s will removed from all fields and replaced with spaces (\" \") on import.  All beginning and ending space characters (\" \") will be removed on import as well.</p> <p>Endurain does not allow duplicate gear nicknames, case insensitively (e.g., <code>Ilves</code> and <code>ilves</code> would not be allowed) and regardless of gear type (e.g., <code>Ilves</code> the bike and <code>ilves</code> the shoe would not be allowed). Gear with duplicate nicknames will not be imported (i.e., only the first item with a given nickname will be imported).</p> <p>The import routine checks for duplicate items, and should not import duplicates. Thus it should be safe to re-import the same file mulitple times. However, due to the renaming of un-named shoes, repeated imports of the same shoe file will create duplicate entries of any unnamed shoes present. </p> <p>Gear that is already present in Endurain due to having an active link with Strava will not be imported via the manual import process.</p>"},{"location":"getting-started/advanced-started/#importing-other-items-from-a-strava-bulk-import","title":"Importing other items from a Strava bulk import","text":"<p>Importing activity metadata and media is under development in October 2025.</p>"},{"location":"getting-started/advanced-started/#image-personalization","title":"Image personalization","text":"<p>It is possible (v0.10.0 or higher) to personalize the login image in the login page. To do that, map the data/server_images directory for image persistence on container updates and:  - Set the image in the server settings zone of the settings page  - A square image is expected. Default one uses 1000px vs 1000px</p>"},{"location":"getting-started/getting-started/","title":"Getting started","text":"<p>Welcome to the guide for getting started on hosting your own production instance of Endurain. Like many other services, Endurain is easiest to get up and running trough Docker compose. It is possible to get Endurain up and running without a domain and reverse proxy, but this guide assumes you want to use a reverse proxy and your domain. Endurain can run on any computer that support OCI containers, but in this guide we are using Debian 13 (should also work with 12).</p>"},{"location":"getting-started/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Domain name pointed to your external IP address.</li> <li>Open FW rules to your server on port 443 and 80. (trough NAT if you are running ipv4)</li> <li>A computer/server with enough disk space for your activity files.</li> <li>A Linux distro that has <code>docker compose</code> cli, and <code>caddy</code> in the repositories.</li> </ul>"},{"location":"getting-started/getting-started/#installing-docker-and-caddy-reverse-proxy","title":"Installing docker and Caddy reverse proxy","text":"<p>Note: If you have a old-ish distro (Ubuntu 22.04 and older) you need to add the repos for caddy and docker. Read how to do it for docker, and caddy. Fore newer distroes (Debian 13 and Ubuntu 24.04 you do not have to do this step).</p> <p>We use apt to do this:</p> <pre><code>sudo apt update -y\nsudo apt install docker.io docker-compose caddy -y\n</code></pre> <p>Confirm your user has the id 1000:</p> <pre><code>id\n</code></pre> <p>If you are not the user 1000, you need to set the <code>UID</code> and <code>GID</code> to your id in the .env file. But to keep this guide as easy to follow as possible, we will assume that you are user 1000.</p>"},{"location":"getting-started/getting-started/#create-directory-structure","title":"Create directory structure","text":"<p>Lets use <code>/opt/endurain/</code> as the root directory for our project.</p> <pre><code>sudo mkdir /opt/endurain\nsudo chown 1000:1000 /opt/endurain\nmkdir -p \\\n  /opt/endurain/backend/{data,logs} \\\n  /opt/endurain/postgres\n</code></pre>"},{"location":"getting-started/getting-started/#docker-compose-deployment","title":"Docker compose Deployment","text":"<p>In this example of setting up Endurain, we will need two files. One <code>docker-compose.yml</code> and <code>.env</code>.</p> <ul> <li>docker-compose.yml tells your system how to set up the container, network and storage.</li> <li>.env holds our secrets and environment variables.</li> </ul> <p>Splitting up the setup like this make it easy to handle updates to the containers, without touching the secrets and other variables.</p>"},{"location":"getting-started/getting-started/#creating-the-docker-compose-and-env-file","title":"Creating the docker-compose and .env file","text":"<p>To make it as easy as possible for selfhoster to get up and running examples of docker-compose.yml and .env is on the git repo. Here are links to the files on the repo:</p> <ul> <li>docker-compose.yml.example</li> <li>.env.example</li> </ul> <pre><code>cd /opt/endurain\nwget https://raw.githubusercontent.com/joaovitoriasilva/endurain/refs/heads/master/docker-compose.yml.example\nwget https://raw.githubusercontent.com/joaovitoriasilva/endurain/refs/heads/master/.env.example\n\nmv docker-compose.yml.example docker-compose.yml\nmv .env.example .env\n</code></pre> <p>Now we need to make changes to the files to reflect your environment. Inside docker-compose.yml there is not much we need to do. If you want to store the files another place then <code>/opt/endurain</code> this is the file you need to change.</p> <p>Here is an explaination on what you can set in the <code>.env</code>:</p> Environment variable How to set it DB_PASSWORD Run <code>openssl rand -hex 32</code> on a terminal to get a secret POSTGRES_PASSWORD Set the same value as DB_PASSWORD. SECRET_KEY Run <code>openssl rand -hex 32</code> on a terminal to get a secret FERNET_KEY Run <code>python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"</code> on a terminal to get a secret or go to https://fernetkeygen.com. Example output is <code>7NfMMRSCWcoNDSjqBX8WoYH9nTFk1VdQOdZY13po53Y=</code> TZ Timezone definition. Insert your timezone. List of available time zones here. Format <code>Europe/Lisbon</code> expected ENDURAIN_HOST https://endurain.yourdomain.com BEHIND_PROXY Change to true if behind reverse proxy POSTGRES_DB Postgres name for the database. POSTGRES_USER Postgres user for the database. <p>Please note:</p> <p>POSTGRES_DB and POSTGRES_USER is values for the database. If you change it from endurain, you also need to set the environment variables for the app image. Please leave them as <code>endurain</code> if you are unsure.</p>"},{"location":"getting-started/getting-started/#start-the-stack","title":"Start the stack","text":"<p>It is finally time to start the stack!</p> <pre><code>cd /opt/endurain\nsudo docker compose up -d\n</code></pre> <p>Check the log output:</p> <pre><code>docker compose logs -f\n</code></pre> <p>If you do not get any errors, continue to next step.</p>"},{"location":"getting-started/getting-started/#visit-the-site","title":"Visit the site","text":"<ul> <li>Visit the site insecurly on http://<code>IP-OF-YOUR-SERVER</code>:8080</li> <li>We still can not login to the site, because the <code>ENDURAIN_HOST</code> doesn't match our local URL.</li> </ul>"},{"location":"getting-started/getting-started/#configure-caddy-as-reverse-proxy-and-get-ssl-cert-from-letsencrypt","title":"Configure Caddy as reverse proxy and get SSL cert from letsencrypt","text":"<ul> <li>Before we configure caddy you need to set your DNS provider to point your domain to your external IP.</li> <li>You also need to open your firewall on port 443 and 80 to the server.</li> </ul> <p>We use caddy outside docker. This way Debian handles the updates (you just need to run <code>sudo apt get update -y</code> and <code>sudo apt get upgrade -y</code>)</p> <p>Caddy is configured in the file <code>/etc/caddy/Caddyfile</code></p> <p>Open the file in your favourite editor, delete the default text, and paste in this:</p> <pre><code>endurain.yourdomain.com {\n        reverse_proxy localhost:8080\n}\n</code></pre> <p>Restart caddy</p> <pre><code>sudo systemctl restart caddy\n</code></pre> <p>Check the ouput of caddy with:</p> <pre><code>sudo journalctl -u caddy\n</code></pre> <p>You should now be able to access your site on endurain.yourdomain.com</p> <p>Log in with username: admin password: admin, and remember to change the password</p> <p>\ud83c\udf89 Weee \ud83c\udf89 You now have your own instance of Endurain up and running!</p>"},{"location":"getting-started/getting-started/#how-to-update","title":"How to update","text":"<ul> <li>Take a backup of your files and db.</li> <li>Check for new releases of the container image here. Read release notes carefully for breaking changes.</li> <li>Log on your server and run:</li> <li>Inside <code>/opt/endurain/docker-compose.yml</code>, change out the version tag (the version after <code>:</code>). If you are running <code>:latest</code> tag on the docker image, you do not have to edit anything in the docker-compose.yml file. </li> </ul> <pre><code>cd /opt/endurain\nsudo docker compose pull\nsudo docker compose up -d\n</code></pre> <p>The same is the case for Postgres. Check for breaking changes in release notes on Postgres Website.</p> <p>** It is generally pretty safe to upgrade postgres minor version f.eks 17.4 to 17.5, but major is often breaking change (example 17.2 to 18.1 )</p>"},{"location":"getting-started/getting-started/#things-to-think-about","title":"Things to think about","text":"<p>You should implement backup strategy for the following directories:</p> <pre><code>/opt/endurain/app/data\n/opt/endurain/app/logs\n</code></pre> <p>You also need to backup your postgres database. It is not good practice to just backup the volume <code>/opt/endurain/postgres</code> this might be corrupted if  the database is in the middle of a wright when the database goes down.</p>"},{"location":"getting-started/getting-started/#default-credentials","title":"Default Credentials","text":"<ul> <li>Username: admin  </li> <li>Password: admin</li> </ul>"},{"location":"getting-started/maria-to-postgres-migration/","title":"MariaDB to Postgres migration guide","text":"<p>This will guide you on how to migrate from MariaDB to Postgres. Endurain will drop support for MariaDB on v0.16.0, so you'll need to perform this migration prior to upgrade to v0.16.0.</p> <p>This guide uses Endurain's built-in export/import functionality to migrate your data.</p>"},{"location":"getting-started/maria-to-postgres-migration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Endurain instance running with MariaDB</li> <li>PostgreSQL database set up and accessible</li> <li>Admin access to your Endurain instance</li> </ul> <p>\u26a0\ufe0f Important Notes:</p> <ul> <li>The export/import process will migrate all user data except user password. Each user will have to do this process</li> <li>You will need to use default credentials (admin/admin) on new setup</li> <li>Keep your existing MariaDB database running for rollback if needed</li> <li>The import process can take time for large databases with many activities</li> <li>Server settings are not migrated</li> </ul>"},{"location":"getting-started/maria-to-postgres-migration/#migration-steps","title":"Migration Steps","text":""},{"location":"getting-started/maria-to-postgres-migration/#step-1-export-data-from-mariadb-instance","title":"Step 1: Export Data from MariaDB Instance","text":"<ol> <li>Instruct each user to log in to Endurain instance (currently running with MariaDB)</li> <li>Each user should navigate to Settings \u2192 My Profile \u2192 Export/Import</li> <li>Each user should lick Export to download a <code>.zip</code> file containing the user data</li> <li>Each user should save this file in a safe location</li> </ol> <p>\u26a0\ufe0f Do NOT delete your existing MariaDB database - keep it for rollback if needed.</p>"},{"location":"getting-started/maria-to-postgres-migration/#step-2-stop-current-endurain-instance","title":"Step 2: Stop Current Endurain Instance","text":"<p>Stop your current Endurain container:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"getting-started/maria-to-postgres-migration/#step-3-update-environment-variables","title":"Step 3: Update Environment Variables","text":"<p>Update your environment variables to point to PostgreSQL (adapt to your environment):</p> <pre><code>DB_TYPE=postgres\nDB_HOST=postgres\nDB_PORT=5432\nDB_USER=endurain\nDB_PASSWORD=your_postgres_password\nDB_NAME=endurain\n</code></pre> <p>Ensure your PostgreSQL database exists and is accessible with these credentials.</p>"},{"location":"getting-started/maria-to-postgres-migration/#step-4-start-fresh-endurain-with-postgresql","title":"Step 4: Start Fresh Endurain with PostgreSQL","text":"<p>Start Endurain with the new PostgreSQL configuration:</p> <pre><code>docker compose up -d\n</code></pre> <p>This will start a fresh Endurain instance with: - Empty PostgreSQL database - Default admin credentials: admin/admin</p>"},{"location":"getting-started/maria-to-postgres-migration/#step-5-import-data","title":"Step 5: Import Data","text":"<ol> <li>Log in with default credentials: admin/admin</li> <li>Create a new user for each of your instance users if applicable</li> <li>Each user should navigate to Settings \u2192 My Profile \u2192 Export/Import</li> <li>Each user should click Import and select the <code>.zip</code> file exported</li> <li>Wait for the import to complete (this may take several minutes for large databases)</li> </ol> <p>\u26a0\ufe0f Note: User passwords are NOT imported for security reasons. All users will need to reset their passwords.</p>"},{"location":"getting-started/maria-to-postgres-migration/#step-6-verify-migration","title":"Step 6: Verify Migration","text":"<p>Verify the migration was successful by checking:</p> <ul> <li>All activities are present</li> <li>Activity streams display correctly</li> <li>Activity media files load</li> <li>Gear information is correct</li> <li>Integrations (Strava, Garmin) are configured</li> <li>Health data is present</li> </ul>"},{"location":"getting-started/maria-to-postgres-migration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/maria-to-postgres-migration/#if-import-fails","title":"If Import Fails","text":"<p>If the import process fails:</p> <ol> <li>Check the application logs in the container</li> <li>Check the <code>app.log</code> file</li> <li>Paste both outputs (container logs and app.log contents) when seeking help</li> </ol>"},{"location":"getting-started/maria-to-postgres-migration/#rolling-back-to-mariadb","title":"Rolling Back to MariaDB","text":"<p>If you need to rollback:</p> <ol> <li>Stop the PostgreSQL instance:</li> </ol> <pre><code>docker compose down\n</code></pre> <ol> <li>Restore your original environment variables (MariaDB settings)</li> <li>Start your original MariaDB instance:</li> </ol> <pre><code>docker compose up -d\n</code></pre>"},{"location":"integrations/3rd-party-apps/","title":"3rd party apps","text":""},{"location":"integrations/3rd-party-apps/#runnerup-integration","title":"RunnerUp Integration","text":"<p>RunnerUp an app for tracking your sport activities with your Android phone, can automatically sync your activities recorded with it to your Endurain instance.</p> <p>RunnerUp is supported until version v0.5.3 of Endurain. An issue is opened to get support for v0.6.0+.</p>"},{"location":"integrations/3rd-party-services/","title":"3rd party services","text":""},{"location":"integrations/3rd-party-services/#garmin-connect-integration","title":"Garmin Connect Integration","text":"<p>To enable Garmin Connect integration, Endurain will ask for your Garmin Connect credentials. These credentials are not stored, but the authentication tokens (access and refresh tokens) are stored in the DB, similar to the Strava integration. The credentials are sent from the frontend to the backend in plain text, so the use of HTTPS is highly recommended.</p> <p>Once the integration with Garmin Connect is configured, on startup, every one and four hours the backend will check if there is new unimported activities and new body composition entries respectively. If yes, the new data is automatically imported.</p> <p>For Garmin Connect integration python-garminconnect Python module is used.</p>"},{"location":"integrations/3rd-party-services/#strava-integration","title":"Strava Integration","text":"<p>\u26a0\ufe0f Warning Due to recent Strava API changes, expect changes in the Strava integration in a following release.</p> <p>To enable Strava integration, ensure your Endurain instance is accessible from the internet and follow Strava's API setup guide. After the integration is successful the access and refresh tokens are stored in the DB. Each user will have his/hers own pair.</p> <p>Once the integration with Strava is configured, on startup and every hour the backend will check if there is new unimported activities. If yes, the new activity is automatically imported.</p> <p>On link, user will need to provide his/her API client ID and secret. Pair will be temporary stored in the DB until the process finishes. Info is sent on a JSON payload and HTTPS end2end is encouraged.</p> <p>On Strava unlink action every data imported from Strava, i.e. activities and gears, will be deleted according to Strava API Agreement.</p> <p>For Strava integration stravalib Python module is used.</p>"}]}