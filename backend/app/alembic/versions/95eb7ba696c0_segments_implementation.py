"""Segments implementation


Revision ID: 95eb7ba696c0
Revises: 2fb0ae78dea9
Create Date: 2025-08-17 10:06:33.317665

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '95eb7ba696c0'
down_revision: Union[str, None] = '2fb0ae78dea9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('segments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='ID for the segment'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User ID that the Segment belongs to'),
    sa.Column('name', sa.String(length=250), nullable=True, comment='Segment name (May include spaces)'),
    sa.Column('activity_type', sa.Integer(), nullable=False, comment='Activity type'),
    sa.Column('gates', mysql.JSON(), nullable=False, comment='Store gates data'),
    sa.Column('city', sa.String(length=250), nullable=True, comment='Segment city (May include spaces)'),
    sa.Column('town', sa.String(length=250), nullable=True, comment='Segment town (May include spaces)'),
    sa.Column('country', sa.String(length=250), nullable=True, comment='Segment country (May include spaces)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_segments_user_id'), 'segments', ['user_id'], unique=False)
    op.create_table('activity_segment',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='ID for the Segment Activity'),
    sa.Column('activity_id', sa.Integer(), nullable=False, comment='Activity ID that the ActivitySegment record belongs to'),
    sa.Column('segment_id', sa.Integer(), nullable=False, comment='Segment ID that the ActivitySegment record belongs to'),
    sa.Column('lap_number', sa.Integer(), nullable=False, comment='Lap number'),
    sa.Column('segment_name', sa.String(length=250), nullable=True, comment='Segment name'),
    sa.Column('start_time', sa.DateTime(), nullable=False, comment='Time when segment was started'),
    sa.Column('gate_ordered', mysql.JSON(), nullable=False, comment='Order by which gates were passed'),
    sa.Column('gate_times', mysql.JSON(), nullable=True, comment='Times when gates were passed'),
    sa.Column('gps_point_index_ordered', mysql.JSON(), nullable=False, comment='Order by which GPS points are passed'),
    sa.Column('sub_segment_times', mysql.JSON(), nullable=False, comment='Sub-segment times in seconds'),
    sa.Column('sub_segment_paces', mysql.JSON(), nullable=False, comment='Sub-segment pace (s/m)'),
    sa.Column('segment_time', sa.DECIMAL(precision=20, scale=10), nullable=False, comment='Time to complete this segment in seconds'),
    sa.Column('segment_distance', sa.Integer(), nullable=True, comment='Segment distance in meters'),
    sa.Column('sub_segment_distances', mysql.JSON(), nullable=True, comment='Sub-segment distances'),
    sa.Column('segment_ele_gain', sa.Integer(), nullable=True, comment='Elevation gain in meters'),
    sa.Column('segment_ele_loss', sa.Integer(), nullable=True, comment='Elevation loss in meters'),
    sa.Column('segment_pace', sa.DECIMAL(precision=20, scale=10), nullable=True, comment='Pace seconds per meter (s/m)'),
    sa.Column('segment_hr_avg', sa.Integer(), nullable=True, comment='Average heart rate (bpm)'),
    sa.Column('segment_hr_max', sa.Integer(), nullable=True, comment='Max heart rate (bpm)'),
    sa.ForeignKeyConstraint(['activity_id'], ['activities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['segment_id'], ['segments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activity_segment_activity_id'), 'activity_segment', ['activity_id'], unique=False)
    op.create_index(op.f('ix_activity_segment_segment_id'), 'activity_segment', ['segment_id'], unique=False)
    op.alter_column('gear', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Gear creation date (DateTime)',
               existing_comment='Gear creation date (DATETIME)',
               existing_nullable=False)
    op.alter_column('users_sessions', 'refresh_token',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.String(length=500),
               existing_comment='Session refresh token',
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users_sessions', 'refresh_token',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=1000),
               existing_comment='Session refresh token',
               existing_nullable=False)
    op.alter_column('gear', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Gear creation date (DATETIME)',
               existing_comment='Gear creation date (DateTime)',
               existing_nullable=False)
    op.drop_index(op.f('ix_activity_segment_segment_id'), table_name='activity_segment')
    op.drop_index(op.f('ix_activity_segment_activity_id'), table_name='activity_segment')
    op.drop_table('activity_segment')
    op.drop_index(op.f('ix_segments_user_id'), table_name='segments')
    op.drop_table('segments')
    # ### end Alembic commands ###
